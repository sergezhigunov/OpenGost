<#@ template hostspecific="true" #>
<#@ assembly name="Microsoft.VisualStudio.Interop" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Windows.Forms" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.Design" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Resources" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="EnvDTE" #>
<#@ parameter name="NamespaceHint" type="System.String" #>
<#
    var model = LoadResources();
#>
// <auto-generated />
using System.Resources;

namespace <#= NamespaceHint #>;

internal static class <#= model.Class #>
{
    private static ResourceManager ResourceManager { get; } = new ResourceManager(
        "<#= model.ResourceName #>",
        typeof(<#= model.Class #>).Assembly);
<#
    foreach (var resource in model.Resources)
    {
#>

<#
            if (resource.Parameters.Any())
            {
#>
    public static string <#= resource.Name #>(<#= List("object ", resource.Parameters) #>)
        => string.Format(
            GetString("<#= resource.Name #>", <#= List("nameof(", resource.Parameters, ")") #>),
            <#= List(resource.Parameters) #>);
<#
        }
        else
        {
#>
    public static string <#= resource.Name #>
        => GetString("<#= resource.Name #>");
<#
        }
    }
#>

    private static string GetString(string name, params string[] formatterNames)
    {
        var value = ResourceManager.GetString(name);
        for (var i = 0; i < formatterNames.Length; i++)
            value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
        return value;
    }
}
<#+
    ResourceFile LoadResources()
    {
        var result = new ResourceFile();

        var resourceFile = (string)Session["ResourceFile"];
        if (!Path.IsPathRooted(resourceFile))
            resourceFile = Host.ResolvePath(resourceFile);


        result.Class = Path.GetFileNameWithoutExtension(resourceFile);

        result.ResourceName = $"{NamespaceHint}.{result.Class}";

        using (var reader = new ResXResourceReader(resourceFile))
        {
            result.Resources = Enumerable.ToList(
                from DictionaryEntry r in reader
                let value = (string)r.Value
                select new Resource
                {
                    Name = (string)r.Key,
                    Value = value,
                    Parameters = Regex.Matches(value, @"\{(\w+)\}").Cast<Match>().Select(m => m.Groups[1].Value)
                        .Distinct().ToList()
                });
        }

        return result;
    }

    static IEnumerable<string> Lines(string value)
        => value.Split(new[] { Environment.NewLine }, StringSplitOptions.None);

    static string List(IEnumerable<string> items)
        => List(null, items);

    static string List(string prefix, IEnumerable<string> items, string suffix = null)
        => string.Join(", ", items.Select(i => prefix + i + suffix));

    class ResourceFile
    {
        public string Class { get; set; }
        public string ResourceName { get; set; }
        public IEnumerable<Resource> Resources { get; set; }
    }

    class Resource
    {
        public string Name { get; set; }
        public string Value { get; set; }
        public IEnumerable<string> Parameters { get; set; }
    }
#>
