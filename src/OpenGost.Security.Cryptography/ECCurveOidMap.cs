using System;
using System.Collections.Generic;
using System.Security.Cryptography;

namespace OpenGost.Security.Cryptography;

internal static class ECCurveOidMap
{
    #region Constants

    private static ECCurve ECCurve256ParamsetTest { get; } = new ECCurve
    {
        CurveType = ECCurve.ECCurveType.PrimeShortWeierstrass,
        Prime = new byte[]
        {
            0x31, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
        },
        A = new byte[]
        {
            0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        },
        B = new byte[]
        {
            0x7e, 0x3b, 0xe2, 0xda, 0xe9, 0x0c, 0x4c, 0x51, 0x2a, 0xfc, 0x72, 0x34, 0x6a, 0x6e, 0x3f, 0x56,
            0x40, 0xef, 0xaf, 0xfb, 0x22, 0xe0, 0xb8, 0x39, 0xe7, 0x8c, 0x93, 0xaa, 0x98, 0xf4, 0xbf, 0x5f,
        },
        Order = new byte[]
        {
            0xb3, 0xf5, 0xcc, 0x3a, 0x19, 0xfc, 0x9c, 0xc5, 0x54, 0x61, 0x97, 0x92, 0x18, 0x8a, 0xfe, 0x50,
            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
        },
        Cofactor = new byte[]
        {
            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        },
        G = new ECPoint
        {
            X = new byte[]
            {
                0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            },
            Y = new byte[]
            {
                0xc8, 0x8f, 0x7e, 0xea, 0xbc, 0xab, 0x96, 0x2b, 0x12, 0x67, 0xa2, 0x9c, 0x0a, 0x7f, 0xc9, 0x85,
                0x9c, 0xd1, 0x16, 0x0e, 0x03, 0x16, 0x63, 0xbd, 0xd4, 0x47, 0x51, 0xe6, 0xa0, 0xa8, 0xe2, 0x08,
            },
        },
    };

    private static ECCurve ECCurve256ParamsetA { get; } = new ECCurve
    {
        CurveType = ECCurve.ECCurveType.PrimeShortWeierstrass,
        Prime = new byte[]
        {
            0x97, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        },
        A = new byte[]
        {
            0x35, 0x73, 0x7e, 0x27, 0x6f, 0x65, 0x2c, 0xb2, 0x33, 0xaa, 0x95, 0xbf, 0x13, 0x20, 0x5e, 0xe2,
            0x7c, 0xa2, 0x35, 0x30, 0xc2, 0x92, 0x48, 0xaf, 0x73, 0x16, 0x98, 0x13, 0x15, 0x3f, 0x17, 0xc2,
        },
        B = new byte[]
        {
            0x13, 0x95, 0xae, 0xf8, 0xa6, 0x37, 0x93, 0xba, 0xf7, 0x7b, 0xe1, 0x08, 0x91, 0xcd, 0xfc, 0x22,
            0x1a, 0xd4, 0xa9, 0x59, 0xc3, 0xe7, 0x20, 0xcc, 0x9c, 0xed, 0x28, 0x74, 0xae, 0x9b, 0x5f, 0x29,
        },
        Order = new byte[]
        {
            0x67, 0x0c, 0x36, 0x6c, 0x55, 0xaf, 0x15, 0xc1, 0x35, 0x66, 0x7b, 0xc8, 0xdf, 0xcd, 0xd8, 0x0f,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
        },
        Cofactor = new byte[]
        {
            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        },
        G = new ECPoint
        {
            X = new byte[]
            {
                0x28, 0xaa, 0x2d, 0x74, 0xfe, 0x82, 0x25, 0x8b, 0xc7, 0x02, 0x2e, 0x93, 0x96, 0x91, 0x8b, 0x65,
                0xbb, 0xb2, 0x12, 0x57, 0x42, 0x23, 0x09, 0x88, 0x0d, 0x2c, 0xe8, 0xa5, 0x43, 0x84, 0xe3, 0x91,
            },
            Y = new byte[]
            {
                0x5c, 0x2e, 0x32, 0x32, 0xdb, 0x8a, 0x26, 0xaf, 0x40, 0x67, 0x76, 0x44, 0x53, 0x0b, 0xde, 0x5f,
                0x56, 0xe9, 0x46, 0xbb, 0xc4, 0x86, 0x57, 0x89, 0x75, 0x03, 0x1a, 0xab, 0x23, 0x94, 0x87, 0x32,
            },
        },
    };

    private static ECCurve ECCurve256CryptoProParamsetA { get; } = new ECCurve
    {
        CurveType = ECCurve.ECCurveType.PrimeShortWeierstrass,
        Prime = new byte[]
        {
            0x97, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        },
        A = new byte[]
        {
            0x35, 0x73, 0x7e, 0x27, 0x6f, 0x65, 0x2c, 0xb2, 0x33, 0xaa, 0x95, 0xbf, 0x13, 0x20, 0x5e, 0xe2,
            0x7c, 0xa2, 0x35, 0x30, 0xc2, 0x92, 0x48, 0xaf, 0x73, 0x16, 0x98, 0x13, 0x15, 0x3f, 0x17, 0xc2,
        },
        B = new byte[]
        {
            0xa6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        },
        Order = new byte[]
        {
            0x93, 0xb8, 0x61, 0xb7, 0x09, 0x1b, 0x84, 0x45, 0x00, 0xd1, 0x5a, 0x99, 0x70, 0x10, 0x61, 0x6c,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        },
        Cofactor = new byte[]
        {
            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        },
        G = new ECPoint
        {
            X = new byte[]
            {
                0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            },
            Y = new byte[]
            {
                0x14, 0x1e, 0x9f, 0x9e, 0x9c, 0xc9, 0xac, 0x22, 0xb1, 0xe3, 0x23, 0xdf, 0x2d, 0x4f, 0x29, 0x35,
                0x76, 0x2b, 0x3f, 0x45, 0x5a, 0x50, 0xdf, 0x27, 0xda, 0x9c, 0x98, 0xe0, 0x71, 0xe4, 0x91, 0x8d,
            },
        },
    };

    private static ECCurve ECCurve256CryptoProParamsetB { get; } = new ECCurve
    {
        CurveType = ECCurve.ECCurveType.PrimeShortWeierstrass,
        Prime = new byte[]
        {
            0x99, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
        },
        A = new byte[]
        {
            0x96, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
        },
        B = new byte[]
        {
            0x8b, 0xbc, 0x1b, 0x7e, 0xce, 0xd4, 0x49, 0x2f, 0x18, 0x2b, 0xff, 0x73, 0x93, 0x25, 0x79, 0xe9,
            0x0a, 0xf8, 0x3d, 0x5c, 0xc2, 0xd3, 0xa7, 0x66, 0xf8, 0xa5, 0x69, 0xa2, 0x19, 0xf4, 0x1a, 0x3e,
        },
        Order = new byte[]
        {
            0x8f, 0x19, 0x8a, 0xcc, 0x1b, 0x16, 0x97, 0xe4, 0xe5, 0x24, 0xa6, 0xf1, 0xff, 0x0c, 0x70, 0x5f,
            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
        },
        Cofactor = new byte[]
        {
            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        },
        G = new ECPoint
        {
            X = new byte[]
            {
                0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            },
            Y = new byte[]
            {
                0xfc, 0x7e, 0x71, 0x17, 0xd7, 0xf8, 0x4b, 0x74, 0xfb, 0xec, 0x03, 0x8d, 0x85, 0xc9, 0x45, 0xc5,
                0xe5, 0x70, 0xc0, 0xb2, 0x3e, 0x1c, 0x3d, 0xb8, 0x80, 0x66, 0xf9, 0x59, 0x43, 0x12, 0xa8, 0x3f,
            },
        },
    };

    private static ECCurve ECCurve256CryptoProParamsetC { get; } = new ECCurve
    {
        CurveType = ECCurve.ECCurveType.PrimeShortWeierstrass,
        Prime = new byte[]
        {
            0x9b, 0x75, 0x2d, 0x02, 0xb9, 0xf7, 0x98, 0x79, 0xd3, 0x51, 0x90, 0x78, 0x86, 0x6e, 0x84, 0xcf,
            0xaa, 0xc8, 0x41, 0x6b, 0x5e, 0xc8, 0x1e, 0xab, 0x07, 0x81, 0x85, 0x5a, 0x5f, 0x60, 0x9f, 0x9b,
        },
        A = new byte[]
        {
            0x98, 0x75, 0x2d, 0x02, 0xb9, 0xf7, 0x98, 0x79, 0xd3, 0x51, 0x90, 0x78, 0x86, 0x6e, 0x84, 0xcf,
            0xaa, 0xc8, 0x41, 0x6b, 0x5e, 0xc8, 0x1e, 0xab, 0x07, 0x81, 0x85, 0x5a, 0x5f, 0x60, 0x9f, 0x9b,
        },
        B = new byte[]
        {
            0x5a, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        },
        Order = new byte[]
        {
                0xb9, 0x0b, 0x98, 0x98, 0x65, 0x3a, 0x2f, 0xf0, 0x74, 0xfb, 0xdd, 0x1e, 0x51, 0xa3, 0x2c, 0x58,
                0xaa, 0xc8, 0x41, 0x6b, 0x5e, 0xc8, 0x1e, 0xab, 0x07, 0x81, 0x85, 0x5a, 0x5f, 0x60, 0x9f, 0x9b,
        },
        Cofactor = new byte[]
        {
            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        },
        G = new ECPoint
        {
            X = new byte[]
            {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            },
            Y = new byte[]
            {
                0x67, 0xbb, 0xb3, 0xfd, 0x0d, 0x55, 0x6e, 0x36, 0x8f, 0x1a, 0x64, 0xd4, 0x40, 0xc4, 0x4d, 0x4d,
                0xee, 0xc0, 0x08, 0xcd, 0x83, 0x37, 0xbf, 0x3c, 0x8c, 0x1a, 0x71, 0x43, 0x57, 0xe5, 0xec, 0x41,
            },
        },
    };

    private static ECCurve ECCurve512ParamsetTest { get; } = new ECCurve
    {
        CurveType = ECCurve.ECCurveType.PrimeShortWeierstrass,
        Prime = new byte[]
        {
            0x73, 0x63, 0xbe, 0x28, 0xf5, 0xbb, 0x64, 0x16, 0xd8, 0x4d, 0x22, 0xac, 0x6f, 0x33, 0xb8, 0x35,
            0x6d, 0x54, 0xe4, 0x80, 0x7e, 0x04, 0x58, 0x04, 0x4a, 0x70, 0xf4, 0x1a, 0x74, 0x52, 0xd8, 0xf1,
            0x5d, 0xd1, 0xd2, 0xb5, 0x09, 0x7c, 0xeb, 0xd4, 0x04, 0x0f, 0xb9, 0xff, 0xb2, 0x14, 0x2b, 0x92,
            0x80, 0xee, 0x2f, 0x6b, 0x7b, 0x26, 0x0d, 0x55, 0xc7, 0x23, 0x00, 0xfe, 0xd1, 0xac, 0x31, 0x45,
        },
        A = new byte[]
        {
            0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        },
        B = new byte[]
        {
            0xdc, 0x2a, 0x30, 0x4f, 0x08, 0xa3, 0xd0, 0xfa, 0x97, 0x68, 0xdd, 0x2a, 0x0c, 0x54, 0x9e, 0xbc,
            0x74, 0xcf, 0xe0, 0x58, 0xca, 0x89, 0x0a, 0x48, 0x22, 0x73, 0xad, 0xb2, 0x13, 0x40, 0x83, 0x61,
            0x43, 0xac, 0xa1, 0xec, 0x49, 0xb6, 0x88, 0xd7, 0xfd, 0x00, 0x94, 0xe4, 0x77, 0xf3, 0xc5, 0x8b,
            0x74, 0xeb, 0x57, 0x4e, 0xa5, 0xcf, 0xd8, 0x29, 0xda, 0x16, 0x11, 0xa3, 0x06, 0x08, 0xff, 0x1c,
        },
        Order = new byte[]
        {
            0xdf, 0xe6, 0xe6, 0x87, 0xf1, 0xaa, 0x44, 0xd6, 0x95, 0xc5, 0x23, 0xbe, 0xed, 0x25, 0x6e, 0xd8,
            0xf1, 0x23, 0xc4, 0xec, 0x5e, 0x5c, 0x90, 0x19, 0xc7, 0xba, 0x1d, 0xcb, 0x7e, 0x2d, 0x2f, 0xa8,
            0x5d, 0xd1, 0xd2, 0xb5, 0x09, 0x7c, 0xeb, 0xd4, 0x04, 0x0f, 0xb9, 0xff, 0xb2, 0x14, 0x2b, 0x92,
            0x80, 0xee, 0x2f, 0x6b, 0x7b, 0x26, 0x0d, 0x55, 0xc7, 0x23, 0x00, 0xfe, 0xd1, 0xac, 0x31, 0x45,
        },
        Cofactor = new byte[]
        {
            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        },
        G = new ECPoint
        {
            X = new byte[]
            {
                0x9a, 0x8a, 0x24, 0x20, 0xb1, 0xf1, 0x30, 0xb5, 0xb4, 0x33, 0xac, 0x7f, 0x97, 0x49, 0xc8, 0x8b,
                0xe2, 0x04, 0xe8, 0xee, 0xa7, 0x0a, 0xb6, 0xc6, 0x8d, 0x83, 0xcd, 0x62, 0x12, 0x61, 0x60, 0xfd,
                0x62, 0xd7, 0x8c, 0xa6, 0x93, 0x10, 0xf9, 0x25, 0xc8, 0x7c, 0x05, 0xd7, 0xb3, 0xb3, 0x13, 0x52,
                0x6c, 0x7a, 0xfd, 0xbb, 0x6e, 0xbf, 0x96, 0xf3, 0x30, 0xee, 0x72, 0x45, 0xc6, 0x9c, 0xd1, 0x24,
            },
            Y = new byte[]
            {
                0x1e, 0x37, 0xdd, 0x1a, 0xcb, 0x92, 0xbb, 0x6d, 0x0b, 0x64, 0x24, 0x1b, 0xb9, 0x18, 0x1a, 0xdc,
                0x43, 0x4e, 0xee, 0xe1, 0x51, 0x33, 0xeb, 0xf7, 0x6b, 0x49, 0xf1, 0x77, 0x6d, 0x15, 0xab, 0x83,
                0x2c, 0x9b, 0xf3, 0x59, 0xc2, 0x47, 0x24, 0xf3, 0xc3, 0xf2, 0xe5, 0x91, 0x1e, 0x06, 0xbf, 0xcf,
                0xdd, 0xac, 0x57, 0xc8, 0x13, 0x06, 0x02, 0x0d, 0x6e, 0xce, 0xd2, 0x3b, 0xa4, 0x12, 0xb3, 0x2b,
            },
        },
    };

    private static ECCurve ECCurve512ParamsetA { get; } = new ECCurve
    {
        CurveType = ECCurve.ECCurveType.PrimeShortWeierstrass,
        Prime = new byte[]
        {
            0xc7, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        },
        A = new byte[]
        {
            0xc4, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        },
        B = new byte[]
        {
            0x60, 0xc7, 0x71, 0x5a, 0x78, 0x90, 0x31, 0x50, 0x61, 0x47, 0xee, 0xeb, 0xd4, 0xf9, 0x2e, 0x86,
            0xdd, 0x90, 0xda, 0x10, 0x40, 0x57, 0xb4, 0x4c, 0x61, 0x27, 0x0d, 0xf3, 0x90, 0xb0, 0x3c, 0xee,
            0x65, 0x62, 0x0b, 0xfd, 0x1c, 0x08, 0xbd, 0x79, 0xe8, 0xb0, 0x1c, 0x76, 0x74, 0x25, 0xb8, 0x34,
            0xda, 0xf1, 0x67, 0x66, 0x2b, 0x0b, 0xbd, 0xc1, 0xdd, 0x86, 0xfc, 0xed, 0x5d, 0x50, 0xc2, 0xe8,
        },
        Order = new byte[]
        {
            0x75, 0xb2, 0x10, 0x1f, 0x41, 0xb1, 0xcd, 0xca, 0x5d, 0xb8, 0xd2, 0xfa, 0xab, 0x38, 0x4b, 0x9b,
            0x60, 0x60, 0x05, 0x4e, 0x8d, 0x2b, 0xf2, 0x6f, 0x11, 0x89, 0x8d, 0xf4, 0x32, 0x95, 0xe6, 0x27,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        },
        Cofactor = new byte[]
        {
            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        },
        G = new ECPoint
        {
            X = new byte[]
            {
                0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            },
            Y = new byte[]
            {
                0xa4, 0xf2, 0x15, 0x52, 0xcb, 0x89, 0xa5, 0x89, 0xb8, 0xf5, 0x35, 0xc2, 0x5f, 0xfe, 0x28, 0x80,
                0xe9, 0x41, 0x3a, 0x0e, 0xa5, 0xe6, 0x75, 0x3d, 0xe9, 0x36, 0xd0, 0x4f, 0xbe, 0x26, 0x16, 0xdf,
                0x21, 0xa9, 0xef, 0xcb, 0xfd, 0x64, 0x80, 0x77, 0xc1, 0xab, 0xf1, 0xac, 0x93, 0x1c, 0x5e, 0xce,
                0xe6, 0x50, 0x54, 0xe2, 0x16, 0x88, 0x1b, 0xa6, 0xe3, 0x6a, 0x83, 0x7a, 0xe8, 0xcf, 0x03, 0x75,
            },
        },
    };

    private static ECCurve ECCurve512ParamsetB { get; } = new ECCurve
    {
        CurveType = ECCurve.ECCurveType.PrimeShortWeierstrass,
        Prime = new byte[]
        {
            0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
        },
        A = new byte[]
        {
            0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
        },
        B = new byte[]
        {
            0x16, 0x01, 0x14, 0xc5, 0xc7, 0xcb, 0x8c, 0xfb, 0x6e, 0x10, 0xa3, 0x1f, 0xee, 0x8b, 0xf7, 0x50,
            0x9c, 0xb6, 0x1a, 0xad, 0x6f, 0x27, 0x8b, 0x7f, 0x21, 0x6d, 0x41, 0xb1, 0x2d, 0x5d, 0x96, 0x3e,
            0x9f, 0x28, 0x4b, 0x6c, 0x80, 0xdc, 0x85, 0xbf, 0xbc, 0x38, 0xf1, 0x4a, 0x61, 0x7d, 0x7c, 0xb9,
            0x17, 0x25, 0x5e, 0x6f, 0xcf, 0x06, 0x3e, 0x7e, 0x45, 0x41, 0xc8, 0x9d, 0x45, 0x1b, 0x7d, 0x68,
        },
        Order = new byte[]
        {
            0xbd, 0x25, 0x4f, 0x37, 0x54, 0x6c, 0x34, 0xc6, 0x0e, 0xea, 0x1b, 0x10, 0x12, 0x67, 0x99, 0x8b,
            0xfa, 0x0c, 0xd4, 0xd9, 0x7b, 0xb7, 0xfd, 0xac, 0x45, 0xa5, 0x65, 0x25, 0x14, 0xec, 0xa1, 0x49,
            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
        },
        Cofactor = new byte[]
        {
            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        },
        G = new ECPoint
        {
            X = new byte[]
            {
                0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            },
            Y = new byte[]
            {
                0xbd, 0x41, 0xfe, 0x80, 0x07, 0x34, 0x21, 0x7e, 0xec, 0xee, 0x4c, 0xf9, 0x55, 0x10, 0x04, 0x28,
                0x88, 0x39, 0xc0, 0xf8, 0xaa, 0xbc, 0x2c, 0x15, 0x39, 0x4a, 0xdf, 0x1e, 0xfd, 0x28, 0xb2, 0xdc,
                0x35, 0x73, 0xec, 0xc8, 0xe6, 0xd9, 0x6d, 0xbe, 0x13, 0xc2, 0x78, 0x75, 0x69, 0x3b, 0x12, 0x3c,
                0x0f, 0x94, 0xa8, 0x47, 0x36, 0x1e, 0x07, 0x2c, 0x4c, 0x09, 0x9b, 0x38, 0xda, 0x7e, 0x8f, 0x1a,
            },
        },
    };

    private static ECCurve ECCurve512ParamsetC { get; } = new ECCurve
    {
        CurveType = ECCurve.ECCurveType.PrimeShortWeierstrass,
        Prime = new byte[]
        {
            0xc7, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        },
        A = new byte[]
        {
            0xd3, 0x9b, 0x68, 0x39, 0x6f, 0x54, 0xb6, 0x2e, 0x2a, 0x9f, 0xda, 0x1f, 0x95, 0x7f, 0xd9, 0x2a,
            0xff, 0x50, 0xcf, 0x6f, 0xf4, 0x71, 0xde, 0x2a, 0xd9, 0xed, 0xc9, 0xe2, 0xc0, 0x61, 0xe8, 0x46,
            0x45, 0x06, 0x43, 0xe1, 0x68, 0x1c, 0xe4, 0x4d, 0x64, 0x66, 0xb8, 0x0e, 0x98, 0xc8, 0x7b, 0x18,
            0xfb, 0x22, 0xc7, 0xd2, 0x29, 0xa5, 0x85, 0x54, 0x87, 0x21, 0xa7, 0x14, 0xe5, 0x03, 0x92, 0xdc,
        },
        B = new byte[]
        {
            0xe1, 0x57, 0x25, 0x31, 0xa5, 0x19, 0x23, 0x8d, 0x3c, 0x0a, 0xbf, 0xf5, 0xa5, 0xc7, 0x8c, 0x2b,
            0xb5, 0xf3, 0xfe, 0x8b, 0x4b, 0x28, 0xe0, 0x8d, 0xc1, 0xd2, 0x19, 0xf7, 0xff, 0xc2, 0xcb, 0x38,
            0xe0, 0xad, 0xe5, 0x0d, 0x4f, 0x2e, 0xda, 0xff, 0x57, 0x4b, 0x9f, 0xf6, 0xa9, 0xb6, 0xef, 0xc7,
            0x6a, 0xf1, 0x37, 0xcf, 0x52, 0x29, 0xc1, 0x8a, 0x2c, 0x6c, 0xbc, 0xce, 0x28, 0xee, 0xc4, 0xb4,
        },
        Order = new byte[]
        {
            0xed, 0x23, 0xf0, 0x47, 0xef, 0x3c, 0x62, 0x94, 0x26, 0xa1, 0x69, 0xa7, 0xe7, 0xa9, 0xed, 0xc8,
            0x2c, 0x50, 0x47, 0x51, 0xff, 0xa9, 0x33, 0x4c, 0x00, 0xab, 0x06, 0x65, 0xa4, 0xdb, 0x8c, 0xc9,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f,
        },
        Cofactor = new byte[]
        {
            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        },
        G = new ECPoint
        {
            X = new byte[]
            {
                0x48, 0x01, 0x95, 0xc1, 0x28, 0x79, 0xbc, 0xc5, 0xaa, 0x97, 0xae, 0x7e, 0x48, 0x85, 0xfb, 0xc6,
                0x10, 0x36, 0xed, 0xb9, 0x3d, 0x03, 0xb9, 0xa7, 0xf2, 0x2b, 0x60, 0xae, 0xa7, 0x72, 0x72, 0xa2,
                0x3a, 0x04, 0xea, 0x4c, 0x07, 0xf7, 0x85, 0xd3, 0x21, 0xf0, 0xae, 0xcb, 0xa9, 0xb7, 0x95, 0x22,
                0xde, 0xf5, 0x3e, 0x59, 0xce, 0x41, 0xe2, 0xeb, 0xbd, 0xe7, 0x3d, 0xc2, 0xdf, 0x1e, 0xe3, 0xe2,
            },
            Y = new byte[]
            {
                0x0f, 0xc4, 0xdd, 0x9a, 0x9a, 0x6e, 0x39, 0xd0, 0x07, 0xae, 0x4b, 0x85, 0xaa, 0x26, 0xf7, 0x04,
                0x63, 0x3b, 0x42, 0x22, 0x58, 0xd8, 0x32, 0xef, 0xd2, 0x1e, 0x02, 0xe3, 0x33, 0x2d, 0x8e, 0xe1,
                0x9b, 0xff, 0x90, 0x20, 0x3d, 0x8c, 0x10, 0x8c, 0x8b, 0x37, 0x27, 0x65, 0x4d, 0x80, 0x39, 0x79,
                0x57, 0xb8, 0x1c, 0x91, 0xf5, 0xcf, 0xbc, 0xab, 0x99, 0xb8, 0x5e, 0x5b, 0xd9, 0x40, 0xce, 0xf5,
            },
        },
    };

    #endregion

    private static volatile IReadOnlyDictionary<string, ECCurve>? _ecCurveOidDictionary;

    private static IReadOnlyDictionary<string, ECCurve> ECCurveOidDictionary
    {
        get
        {
            if (_ecCurveOidDictionary == null)
            {
                var ecCurveOidDictionary = new Dictionary<string, ECCurve>
                {
                    { "1.2.643.7.1.2.1.1.0", ECCurve256ParamsetTest },
                    { "1.2.643.7.1.2.1.1.1", ECCurve256ParamsetA },
                    { "1.2.643.2.2.35.0", ECCurve256ParamsetTest },
                    { "1.2.643.2.2.35.1", ECCurve256CryptoProParamsetA },
                    { "1.2.643.2.2.35.2", ECCurve256CryptoProParamsetB },
                    { "1.2.643.2.2.35.3", ECCurve256CryptoProParamsetC },
                    { "1.2.643.2.2.36.0", ECCurve256CryptoProParamsetA },
                    { "1.2.643.7.1.2.1.2.0", ECCurve512ParamsetTest },
                    { "1.2.643.7.1.2.1.2.1", ECCurve512ParamsetA },
                    { "1.2.643.7.1.2.1.2.2", ECCurve512ParamsetB },
                    { "1.2.643.7.1.2.1.2.3", ECCurve512ParamsetC },
                };

                _ecCurveOidDictionary = ecCurveOidDictionary;
            }

            return _ecCurveOidDictionary;
        }
    }

    public static bool OidValueRegistered(string oidValue)
    {
        if (oidValue == null)
            throw new ArgumentNullException(nameof(oidValue));
        return ECCurveOidDictionary.ContainsKey(oidValue);
    }

    public static ECCurve GetNamedCurveByOid(string oidValue)
    {
        if (oidValue == null)
            throw new ArgumentNullException(nameof(oidValue));
        if (!ECCurveOidDictionary.ContainsKey(oidValue))
            throw new NotImplementedException();

        return ECCurve.CreateFromValue(oidValue);
    }

    public static ECCurve GetExplicitCurveByOid(string oidValue)
    {
        if (oidValue == null)
            throw new ArgumentNullException(nameof(oidValue));
        if (!ECCurveOidDictionary.ContainsKey(oidValue))
            throw new NotImplementedException();

        return ECCurveOidDictionary[oidValue].Clone();
    }
}
