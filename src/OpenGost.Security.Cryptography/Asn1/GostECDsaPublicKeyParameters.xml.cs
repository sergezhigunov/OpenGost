// <auto-generated />
using System.Formats.Asn1;
using System.Runtime.InteropServices;

using OpenGost.Security.Cryptography.Properties;

#nullable enable

namespace OpenGost.Security.Cryptography.Asn1
{
    [StructLayout(LayoutKind.Sequential)]
    internal partial struct GostECDsaPublicKeyParameters
    {
        internal string PublicKeyParamSet;
        internal string? DigestParamSet;

        internal readonly void Encode(AsnWriter writer)
        {
            Encode(writer, Asn1Tag.Sequence);
        }

        internal readonly void Encode(AsnWriter writer, Asn1Tag tag)
        {
            writer.PushSequence(tag);

            try
            {
                writer.WriteObjectIdentifier(PublicKeyParamSet);
            }
            catch (ArgumentException e)
            {
                throw new CryptographicException(CryptographyStrings.CryptographicDerInvalidEncoding, e);
            }

            if (DigestParamSet != null)
            {
                try
                {
                    writer.WriteObjectIdentifier(DigestParamSet);
                }
                catch (ArgumentException e)
                {
                    throw new CryptographicException(CryptographyStrings.CryptographicDerInvalidEncoding, e);
                }
            }

            writer.PopSequence(tag);
        }

        internal static GostECDsaPublicKeyParameters Decode(ReadOnlyMemory<byte> encoded, AsnEncodingRules ruleSet)
        {
            return Decode(Asn1Tag.Sequence, encoded, ruleSet);
        }

        internal static GostECDsaPublicKeyParameters Decode(Asn1Tag expectedTag, ReadOnlyMemory<byte> encoded, AsnEncodingRules ruleSet)
        {
            try
            {
                AsnValueReader reader = new AsnValueReader(encoded.Span, ruleSet);

                DecodeCore(ref reader, expectedTag, encoded, out GostECDsaPublicKeyParameters decoded);
                reader.ThrowIfNotEmpty();
                return decoded;
            }
            catch (AsnContentException e)
            {
                throw new CryptographicException(CryptographyStrings.CryptographicDerInvalidEncoding, e);
            }
        }

        internal static void Decode(ref AsnValueReader reader, ReadOnlyMemory<byte> rebind, out GostECDsaPublicKeyParameters decoded)
        {
            Decode(ref reader, Asn1Tag.Sequence, rebind, out decoded);
        }

        internal static void Decode(ref AsnValueReader reader, Asn1Tag expectedTag, ReadOnlyMemory<byte> rebind, out GostECDsaPublicKeyParameters decoded)
        {
            try
            {
                DecodeCore(ref reader, expectedTag, rebind, out decoded);
            }
            catch (AsnContentException e)
            {
                throw new CryptographicException(CryptographyStrings.CryptographicDerInvalidEncoding, e);
            }
        }

        private static void DecodeCore(ref AsnValueReader reader, Asn1Tag expectedTag, ReadOnlyMemory<byte> rebind, out GostECDsaPublicKeyParameters decoded)
        {
            decoded = default;
            AsnValueReader sequenceReader = reader.ReadSequence(expectedTag);

            decoded.PublicKeyParamSet = sequenceReader.ReadObjectIdentifier();

            if (sequenceReader.HasData && sequenceReader.PeekTag().HasSameClassAndValue(Asn1Tag.ObjectIdentifier))
            {
                decoded.DigestParamSet = sequenceReader.ReadObjectIdentifier();
            }


            sequenceReader.ThrowIfNotEmpty();
        }
    }
}
#nullable restore
